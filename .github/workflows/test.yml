name: Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      test_mode:
        description: 'Test mode to run'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - unit
          - integration
          - performance
          - smoke

env:
  PYTHON_VERSION: '3.13'

jobs:
  lint-and-type-check:
    name: Code Quality (Lint & Type Check)
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install uv
      uses: astral-sh/setup-uv@v2
      with:
        version: "latest"

    - name: Install dependencies
      run: |
        uv sync --group dev

    - name: Run linting
      run: |
        python scripts/run-tests.py lint --verbose

    - name: Run type checking
      run: |
        python scripts/run-tests.py types --verbose

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: lint-and-type-check
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install uv
      uses: astral-sh/setup-uv@v2

    - name: Install dependencies
      run: |
        uv sync --group dev

    - name: Run unit tests
      run: |
        python scripts/run-tests.py unit --verbose

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      if: always()
      with:
        files: ./coverage.xml
        flags: unit-tests
        name: unit-test-coverage

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: lint-and-type-check
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install uv
      uses: astral-sh/setup-uv@v2

    - name: Install dependencies
      run: |
        uv sync --group dev

    - name: Run integration tests
      run: |
        python scripts/run-tests.py integration --verbose

    - name: Run golden file tests
      run: |
        python scripts/run-tests.py golden --verbose

  cli-tests:
    name: CLI Tests
    runs-on: ubuntu-latest
    needs: lint-and-type-check
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install uv
      uses: astral-sh/setup-uv@v2

    - name: Install dependencies
      run: |
        uv sync --group dev

    - name: Run CLI tests
      run: |
        python scripts/run-tests.py cli --verbose

    - name: Test CLI installation
      run: |
        uv pip install -e .
        dbt-to-lookml --help

  error-handling-tests:
    name: Error Handling Tests
    runs-on: ubuntu-latest
    needs: lint-and-type-check
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install uv
      uses: astral-sh/setup-uv@v2

    - name: Install dependencies
      run: |
        uv sync --group dev

    - name: Run error handling tests
      run: |
        python scripts/run-tests.py error --verbose

  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.test_mode == 'performance' || github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install uv
      uses: astral-sh/setup-uv@v2

    - name: Install dependencies
      run: |
        uv sync --group dev

    - name: Install psutil for memory monitoring
      run: |
        uv pip install psutil

    - name: Run performance tests
      run: |
        python scripts/run-tests.py performance --verbose

    - name: Run benchmark
      run: |
        make benchmark

  smoke-tests:
    name: Smoke Tests
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install uv
      uses: astral-sh/setup-uv@v2

    - name: Install dependencies
      run: |
        uv sync --group dev

    - name: Run smoke tests
      run: |
        python scripts/run-tests.py smoke --verbose

  multi-python-test:
    name: Multi-Python Version Tests
    runs-on: ubuntu-latest
    needs: lint-and-type-check
    strategy:
      matrix:
        python-version: ['3.11', '3.12', '3.13']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install uv
      uses: astral-sh/setup-uv@v2

    - name: Install dependencies
      run: |
        uv sync --group dev

    - name: Run core tests
      run: |
        python scripts/run-tests.py unit
        python scripts/run-tests.py integration

  comprehensive-test:
    name: Comprehensive Test Suite
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, cli-tests, error-handling-tests]
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.test_mode == 'all' || github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install uv
      uses: astral-sh/setup-uv@v2

    - name: Install dependencies
      run: |
        uv sync --group dev

    - name: Install psutil for performance tests
      run: |
        uv pip install psutil

    - name: Run comprehensive test suite
      run: |
        python scripts/run-tests.py all --verbose --report test_results.json

    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results
        path: test_results.json

    - name: Generate test summary
      if: always()
      run: |
        if [ -f test_results.json ]; then
          echo "## Test Results Summary" >> $GITHUB_STEP_SUMMARY
          python -c "
          import json
          with open('test_results.json') as f:
              data = json.load(f)
          print(f'**Total Suites:** {data[\"summary\"][\"total_suites\"]}')
          print(f'**Passed:** {data[\"summary\"][\"passed_suites\"]}')
          print(f'**Failed:** {data[\"summary\"][\"failed_suites\"]}')
          print()
          print('### Suite Results')
          for suite, result in data['results'].items():
              status = '✅' if result['passed'] else '❌'
              print(f'- {status} {suite.replace(\"_\", \" \").title()}')
          " >> $GITHUB_STEP_SUMMARY
        fi

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Bandit security scan
      uses: tj-actions/bandit@v5.1
      with:
        options: "-r src/ -f json -o bandit-report.json"

    - name: Upload security scan results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-scan
        path: bandit-report.json

  dependency-check:
    name: Dependency Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install uv
      uses: astral-sh/setup-uv@v2

    - name: Install dependencies
      run: |
        uv sync --group dev

    - name: Check for security vulnerabilities
      run: |
        uv pip install safety
        uv pip freeze | safety check --json --output safety-report.json || true

    - name: Upload dependency check results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: dependency-check
        path: safety-report.json

  build-test:
    name: Build Test
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install uv
      uses: astral-sh/setup-uv@v2

    - name: Install build dependencies
      run: |
        uv pip install build

    - name: Build package
      run: |
        python -m build

    - name: Test installation from wheel
      run: |
        uv pip install dist/*.whl
        dbt-to-lookml --version

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist
        path: dist/

  final-status:
    name: Final Status
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, cli-tests, error-handling-tests, smoke-tests, multi-python-test]
    if: always()
    
    steps:
    - name: Check status
      run: |
        if [ "${{ needs.unit-tests.result }}" = "success" ] && \
           [ "${{ needs.integration-tests.result }}" = "success" ] && \
           [ "${{ needs.cli-tests.result }}" = "success" ] && \
           [ "${{ needs.error-handling-tests.result }}" = "success" ] && \
           [ "${{ needs.smoke-tests.result }}" = "success" ] && \
           [ "${{ needs.multi-python-test.result }}" = "success" ]; then
          echo "🎉 All required tests passed!"
          echo "status=success" >> $GITHUB_OUTPUT
        else
          echo "❌ Some tests failed!"
          echo "status=failure" >> $GITHUB_OUTPUT
          exit 1
        fi